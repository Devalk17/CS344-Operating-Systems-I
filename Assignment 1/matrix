#!/bin/bash

# CS344
# Assignment 1
# Matrices
# Name: Deval Kaku
# OSU id: 933342527




# DIMS OPERATION

#1 Declare a matrix and read and store data in that matrix.
#2 Count the number of rows and coloumns in the matrix to give out the dimensions of the matrix.

dims() {

declare -A matrix
row=0
col=0
while read m1
	do
		row=0
		for i in $m1
	do
		matrix[$row,$col]=$i

                row=$((row+1))
        done
		col=$((col+1))
        done < $1
echo $col $row
}




# TRANSPOSE OPERATION

#1 Declare a matrix and read and store data in that matrix.
#2 First, echo col then echo row+1 and again echo col 

transpose() {

declare -A matrix
row=0
col=0
while read m1
	do
		row=0
		for i in $m1
	do
		matrix[$row,$col]=$i
		row=$((row+1))
	done
		col=$((col+1))	
		done < $1
		for ((i=0;i<row;i++))
	do
		for ((j=0;j<col;j++))
	do
		echo  -n -e "${matrix[$i,$j]}"
		if test $j = $(expr $col - 1)
	then
		echo -n ""
	else
		echo -e -n "\t"
	fi
	done
		if test $i = $row
	then
		echo -n ""
	else
		echo
	fi
done
}




# MEAN OPERATION

#1 Declare a matrix and read and store data in that matrix.
#2 Add up all the numbers that belong to the same coloumn.
#3 Rounding up or rounding down. I have multiplied first by 10 and then checked the remainder and then again divided it by 10.

mean() {

declare -A matrix
row=0
col=0
while read myfile
	do
		col=0
	for i in $myfile
	do
		matrix[$row,$col]=$i
		((col++))
	done
		((row++))
	done < $1
	for ((j=0;j<col;j++))
	do
		c=0
	for((k=0;k<row;k++))
	do
		m=${matrix[$k,$j]}
		c=$(expr $c + $m)
	done
		x=$(($c*10))
		y=$(($x/$row))
		z=$(($y%10))
	if test $z -gt 4
	then
		z=$(($y/10))
	echo -n -e "$(expr $z + 1)"
	elif test $z -lt -4
	then
		z=$(($y/10))
	echo -n -e "$(expr $z - 1)"
	else
	echo -n -e "$(($y/10))"
	fi
	if test $j = $(expr $col - 1)
	then
	echo 
	else
	echo -e -n "\t"
	fi
	done
}




# ADD OPERATION

#1 Declare a matrix and read and store data in that matrix.
#2 Check whether both the matrices are compatible or not.
#3 Add both the matrices and echo.

add() {

declare -A matrix1
declare -A matrix2
row=0
col=0
	while read myfile1
	do
		col=0
	for i in $myfile1
	do
		matrix1[$row,$col]=$i
		((col++))
	done
		((row++))
	done < $1
		x=0
		y=0
	while read myfile
	do
		y=0
	for i in $myfile
	do
		matrix2[$x,$y]=$i
		((y++))
	done
		((x++))
	done < $2
	if test $x = $row && test $y = $col
	then 
		i=0
		j=0
	while read myfile2
	do
		j=0
	for x in $myfile2
	do
		c=${matrix1[$i,$j]}
	echo -e -n "$(expr $c + $x)"	
	if test $j = $(expr $col - 1)
	then
	echo -n ""
	else
	echo -e -n "\t"
	fi	
	((j++))
	done
	echo
		((i++))
	done < $2
	else
	echo "The entered inputs are not compatible" 1>&2
	exit 1
fi
}




# MULTIPLY OPERATION

#1 Declare a matrix and read and store data in that matrix.
#2 Check whether both the matrices are compatible or not.
#3 Multiply the matrices and echo.

multiply() {

declare -A matrix1
declare -A matrix2
rowmat1=0
colmat1=0
	while read myfile1
	do
		colmat1=0
	for i in $myfile1
	do
		matrix1[$rowmat1,$colmat1]=$i
		((colmat1++))
	done
		((rowmat1++))
	done < $1
		rowmat2=0
		colmat2=0
	while read myfile2	
	do
		colmat2=0
	for i in $myfile2
	do
		matrix2[$rowmat2,$colmat2]=$i
		((colmat2++))
	done
		((rowmat2++))
	done < $2
	if test $colmat1 = $rowmat2
	then
	for ((i=0;i<rowmat1;i++))
	do
	for ((j=0;j<colmat2;j++))
	do
		c=0
	for((k=0;k<rowmat2;k++))
	do
		m1=${matrix1[$i,$k]}
		m2=${matrix2[$k,$j]}
		d=$(expr $m1 \* $m2)  
		c=$(expr $c + $d)
	done 
	echo -e -n "$c"
	if test $j = $(expr $colmat2 - 1)
	then
	echo -n ""
	else
	echo -e -n "\t"
	fi
	done
	echo
	done
	else
		echo "The given two matrices cannot be multiplied" 1>&2
	exit 1
	fi
}

#1 Read the argument $1 for checking a function's name. If the function is not found, echo stderr.
#2 Check whether the number of arguments is correct. If the number of arguments is not correct, echo to stderr.
#3 Check whether the argument is readable. If the argument is not readable, echo to stderr.
#4 Call the function and send the argument to the function.

function=$1

	if test "$function" == "dims" || test "$function" == "transpose" || test "$function" == "mean"
		then 
			mtstdin="${2:-/dev/stdin}"
		if test $3
		then
		echo "Either the operartion is wrong or the input is wrong" 1>&2
	exit 1
		elif ! [ -r $2 ]
		then
		echo "The input is not readable" 1>&2
	exit 1
		else
			$function $mtstdin
	fi
		elif test "$function" == "add" || test "$function" == "multiply"
		then
		if (($# == 1)) || test "$4"
		then
		echo "The input is wrong" 1>&2
	exit 1
		elif ! [ -r $2 ] || ! [ -r $3 ]
		then
		echo "readable input" 1>&2
	exit 1
		else
			$function $2 $3
	fi
		else
		echo "Either the operartion is wrong or the input is wrong" 1>&2
	exit 1
fi
